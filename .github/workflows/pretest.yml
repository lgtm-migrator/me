name: pretest

on:
  workflow_call:
    inputs:
      deployment_environment:
        description: 'The targeted `DEPLOYMENT_ENVIRONMENT`'
        required: true
        default: dev
        type: string

  workflow_dispatch:
    deployment_environment:
      description: 'The targeted `DEPLOYMENT_ENVIRONMENT`'
      required: true
      default: dev
      type: choice
      options:
        - dev
        - prd
jobs:
  pretest:
    name: Run `yarn pretest`
    env:
      DEPLOY: false
      DEPLOYMENT_ENVIRONMENT: ${{ github.event.inputs.deployment_environment || inputs.deployment_environment }}
      runs-on:
        - ubuntu-latest
    concurrency: pretest-${{ github.ref }}
    steps:
      - name: Set variables
        id: variables
        run: |
          echo "::set-output name=deployment_environment::$DEPLOYMENT_ENVIRONMENT"
          echo "NODE_ENV=$DEPLOYMENT_ENVIRONMENT" >> $GITHUB_ENV
          echo "PRINTABLE_PUPPETEER_NO_SANDBOX=$CI" >> $GITHUB_ENV
          echo "CPU_ARCH=$RUNNER_ARCH" >> $GITHUB_ENV
          echo "OS_NAME=$RUNNER_OS" >> $GITHUB_ENV
          echo "BRANCH=$GITHUB_REF_NAME" >> $GITHUB_ENV
          echo "COMMIT_SHA=$GITHUB_SHA" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$GITHUB_RUN_ID" >> $GITHUB_ENV
          echo "JOB_NUMBER=$GITHUB_RUN_ATTEMPT" >> $GITHUB_ENV

      - name: Run `git checkout`
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup node@16
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Install dependencies on build runner
        uses: ryankurte/action-apt@v0.3.0
        with:
          packages: "language-pack-ja japan* fonts-wqy-microhei ttf-wqy-microhei"

      # NOTE-RT: Rerun `install` to make sure we've got our dependencies
      - name: Install `yarn`
        run: |
          npm install -g yarn@1
          yarn config set script-shell $(which bash)
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash
      - name: Restore `node_modules` cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-${{ steps.get-date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-
            ${{ runner.os }}-yarn-
      - name: Actually run `yarn install --frozen-lockfile`
        run: yarn install --frozen-lockfile

      - name: Setup for tests
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          "./cc-test-reporter before-build"
      - name: Actually run `yarn pretest`
        env:
          NODE_ENV: test
        run: |
          yarn pretest
        timeout-minutes: 10
      - name: Cleanup & handle test outputs
        if: always()
        env:
          NODE_ENV: test
          CODECLIMATE_API_HOST: https://codebeat.co/webhooks/code_coverage
          CODECLIMATE_REPO_TOKEN: 98216c3b-5de5-4a1f-b991-beb9bf2162a
        run: |
          yarn run cover:collect
          yarn codeclimate-test-reporter < coverage/lcov.info
