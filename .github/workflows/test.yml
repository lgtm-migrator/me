name: test

on:
  workflow_call:
    inputs:
      deployment_environment:
        description: 'The targeted `DEPLOYMENT_ENVIRONMENT`'
        required: false
        default: dev
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      CC_TEST_REPORTER_ID:
        required: true
      CHECK_RUN_REPORTER_TOKEN:
        required: true
      CODACY_PROJECT_TOKEN:
        required: true
      CODECOV_TOKEN:
        required: true
      COVERALLS_REPO_TOKEN:
        required: true
      REPORT_CI_TOKEN:
        required: true

  workflow_dispatch:
    deployment_environment:
      description: 'The targeted `DEPLOYMENT_ENVIRONMENT`'
      required: true
      default: dev
      type: choice
      options:
        - dev
        - prd
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      CC_TEST_REPORTER_ID:
        required: true
      CHECK_RUN_REPORTER_TOKEN:
        required: true
      CODACY_PROJECT_TOKEN:
        required: true
      CODECOV_TOKEN:
        required: true
      COVERALLS_REPO_TOKEN:
        required: true
      REPORT_CI_TOKEN:
        required: true

jobs:
  test:
    name: Run `yarn test`
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      DEPLOY: false
      DEPLOYMENT_ENVIRONMENT: ${{ github.event.inputs.deployment_environment || inputs.deployment_environment }}
    runs-on:
      - ubuntu-latest
    concurrency: test-${{ github.ref }}
    steps:
      - name: Set variables
        id: variables
        run: |
          echo "::set-output name=deployment_environment::$DEPLOYMENT_ENVIRONMENT"
          echo "NODE_ENV=$DEPLOYMENT_ENVIRONMENT" >> $GITHUB_ENV
          echo "PRINTABLE_PUPPETEER_NO_SANDBOX=$CI" >> $GITHUB_ENV
          echo "CPU_ARCH=$RUNNER_ARCH" >> $GITHUB_ENV
          echo "OS_NAME=$RUNNER_OS" >> $GITHUB_ENV
          echo "BRANCH=$GITHUB_REF_NAME" >> $GITHUB_ENV
          echo "GIT_BRANCH=$GITHUB_REF_NAME" >> $GITHUB_ENV
          echo "COMMIT_SHA=$GITHUB_SHA" >> $GITHUB_ENV
          echo "GIT_COMMIT_SHA=$GITHUB_SHA" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$GITHUB_RUN_ID" >> $GITHUB_ENV
          echo "JOB_NUMBER=$GITHUB_RUN_ATTEMPT" >> $GITHUB_ENV
          if [[ $GITHUB_EVENT_NAME == 'pull_request' || $GITHUB_EVENT_NAME == 'pull_request_target' ]]; then
            echo "PULL_REQUEST=true" >> $GITHUB_ENV
          fi;

      - name: Run `git checkout`
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup node@12
        uses: actions/setup-node@v2
        with:
          node-version: "12"
      - name: Setup dependencies on build runner
        run: |
          sudo apt-get update
          sudo apt-get install language-pack-ja japan* fonts-wqy-microhei ttf-wqy-microhei

      # @NOTE-RT: Rerun `install` to make sure we've got our dependencies
      - name: Install `yarn`
        run: |
          npm install -g yarn@1
          yarn config set script-shell $(which bash)
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash
      - name: Restore `node_modules` cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-${{ steps.get-date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-
            ${{ runner.os }}-yarn-
      - name: Actually run `yarn install --frozen-lockfile`
        run: yarn install --frozen-lockfile

      - name: Setup for tests
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > $PWD/cc-test-reporter
          chmod +x $PWD/cc-test-reporter
          $PWD/cc-test-reporter before-build
      - name: Setup DynamoDB Local
        uses: rrainn/dynamodb-action@v2.0.1
      - name: Actually run `yarn test`
        id: test-actual
        env:
          NODE_ENV: test
        run: |
          yarn run pretest
          yarn cover:actual
        timeout-minutes: 10
      - name: Cleanup & handle test outputs
        if: always()
        env:
          NODE_ENV: test
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
          CHECK_RUN_REPORTER_TOKEN: ${{ secrets.CHECK_RUN_REPORTER_TOKEN }}
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          COVERALLS_GIT_BRANCH: ${{ env.BRANCH }}
          COVERALLS_GIT_COMMIT: ${{ env.COMMIT_SHA }}
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          COVERALLS_SERVICE_JOB_ID: ${{ env.BUILD_NUMBER }}
          COVERALLS_SERVICE_JOB_NUMBER: ${{ env.JOB_NUMBER }}
          COVERALLS_SERVICE_NAME: github
          REPORT_CI_TOKEN: ${{ secrets.REPORT_CI_TOKEN }}
        run: |
          yarn run kill --scope @randy.tarampi/service
          yarn run pretest:collect
          if [ "$PULL_REQUEST" ]; then yarn run check-run-reporter:pretest; fi;
          yarn run cover:collect
          if [ "$PULL_REQUEST" ]; then yarn run check-run-reporter:test; fi;
          python < $(curl https://report.ci/upload.py)
          bash <(curl -s https://codecov.io/bash)
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage/lcov.info
          yarn codeclimate-test-reporter < coverage/lcov.info
          $PWD/cc-test-reporter after-build --exit-code ${{ steps.test-actual.outputs.exit_code }}
          yarn run coveralls
